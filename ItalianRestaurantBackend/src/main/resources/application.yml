spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/italian_restaurant
    username: postgres
    password: postgres
    driverClassName: org.postgresql.Driver
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
      location: uploads

  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
    show-sql: true
    hibernate:
      ddl-auto: validate
  flyway:
    baseline-on-migrate: true
    locations: classpath:db/migration
    user: postgres
    password: postgres
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${SPRING_MAIL_USERNAME}
    password: ${SPRING_MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  security:
    oauth2:
      client:
        registration:
          google:
            clientId: ${GOOGLE_CLIENT_ID}
            clientSecret: ${GOOGLE_CLIENT_SECRET}
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - email
              - profile
          facebook:
            clientId: ${FACEBOOK_CLIENT_ID}
            clientSecret: ${FACEBOOK_CLIENT_SECRET}
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - email
              - public_profile
          github:
            clientId: ${GITHUB_CLIENT_ID}
            clientSecret: ${GITHUB_CLIENT_SECRET}
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - user:email
              - read:user
app:
  security:
    jwt:
      tokenSecret: ${JWT_SECRET_KEY}
      tokenExpirationSeconds: 1209600 # 14 days
    cors:
      allowedOrigins: \*
    oauth2:
      # After successfully authenticating with the OAuth2 Provider,
      # we'll be generating an auth token for the user and sending the token to the
      # redirectUri mentioned by the client in the /oauth2/authorize request.
      # We're not using cookies because they won't work well in mobile clients.
      authorizedRedirectUris:
        - http://localhost:4200/oauth2/redirect
        - myandroidapp://oauth2/redirect
        - myiosapp://oauth2/redirect

  front-url: http://localhost:4200

aws:
  access-key: ${AWS_ACCESS_KEY}
  secret-key: ${AWS_SECRET_KEY}
  bucket-name: ${AWS_BUCKET_NAME}

stripe:
  secret-key: ${STRIPE_SECRET_KEY}
  webhook-secret: ${STRIPE_WEBHOOK_SECRET}

server:
  error:
    include-message: always

